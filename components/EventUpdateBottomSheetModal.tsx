import {View, StyleSheet, Text, TouchableOpacity, Alert, Image} from 'react-native';
import React, {forwardRef, useCallback, useContext, useEffect, useMemo, useRef, useState} from 'react';
import {
    BottomSheetBackdrop,
    BottomSheetModal,
    BottomSheetTextInput,
    BottomSheetView,
    useBottomSheetSpringConfigs
} from '@gorhom/bottom-sheet';
import ConfirmButton from "@/components/ConfirmButton";
import * as ImagePicker from 'expo-image-picker'; // üö® NEW: Image picker
import {Platform} from "react-native";
import AsyncStorage from "@react-native-async-storage/async-storage";
import axios from "axios";
import { AxiosResponse } from 'axios';



interface EventUpdateProps {
    id: number;
    name: string;
    description: string;
    onClose?: () => void;
}

const EventCreationBottomSheetModal = React.memo(forwardRef<BottomSheetModal, EventUpdateProps>((props, ref) => {
    const { name, description, onClose, id } = props;
    const localNameRef = useRef(name);
    const localDescriptionRef = useRef(description);
    const [selectedImage, setSelectedImage] = useState<string | null>(null);
    const [isSubmitting, setIsSubmitting] = useState(false);

    const handleNameChange = useCallback((text: string) => {
        localNameRef.current = text;
    }, []);

    const handleDescriptionChange = useCallback((text: string) => {
        localDescriptionRef.current = text;
    }, []);

    useEffect(() => {
        (async () => {
            if (Platform.OS !== 'web') {
                const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
                if (status !== 'granted') {
                    Alert.alert('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è', '–ù—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –≥–∞–ª–µ—Ä–µ–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
                }
            }
        })();
        console.log('Update BottomSheet opened with props name:', name, 'description: ', description, 'id: ', id);
    }, []);

    const handleUpdateSave = async () => {
        Alert.alert(
            '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
            '–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
            [
                {
                    text: '–û—Ç–º–µ–Ω–∞',
                    style: 'cancel',
                },
                {
                    text: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
                    style: 'destructive',
                    onPress: async () => {
                        try {
                            setIsSubmitting(true);
                            const apiUrl = process.env.EXPO_PUBLIC_API_URL_GEO;
                            const token = await AsyncStorage.getItem('authToken');

                            const updateData = {
                                name: localNameRef.current,
                                description: localDescriptionRef.current
                            };

                            const response = await axios.patch(
                                `${apiUrl}/api/v1/events/${id}/`,
                                updateData,
                                {
                                    headers: {
                                        Authorization: `Bearer ${token}` // –ü–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
                                    }
                                }
                            );
                            if(response.status === 200){
                                if (selectedImage) {
                                    console.log('[DEBUG] Starting image upload');
                                    await uploadImage(id);
                                    console.log('[DEBUG] Image upload completed');
                                }
                                (ref as any).current?.dismiss();
                            }

                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
                            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ');
                        } finally {
                            setIsSubmitting(false);
                        }
                    },
                },
            ],
            { cancelable: true }
        );
    }

    const handleImagePick = async () => {
        try {
            const result = await ImagePicker.launchImageLibraryAsync({
                mediaTypes: ['images'],
                allowsEditing: true,
                aspect: [4, 3],
                quality: 0.8,
            });

            if (!result.canceled && result.assets) {
                setSelectedImage(result.assets[0].uri);
                console.log('selected image ', result.assets[0].uri);
            }
        } catch (error) {
            Alert.alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        }
    };

    const uploadImage = async (eventId: number) => {
        try {
            console.log('[DEBUG] Starting image upload process');

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            console.log('[DEBUG] selectedImage:', selectedImage);
            console.log('[DEBUG] eventId:', eventId);

            if (!selectedImage || !eventId) {
                console.error('[ERROR] Missing required data for upload');
                return;
            }

            const formData = new FormData();
            const filename = selectedImage.split('/').pop();

            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ñ–∞–π–ª–∞
            const fileObject = {
                uri: selectedImage,
                name: filename || `event_${Date.now()}.jpg`,
                type: 'image/jpeg',
            };

            formData.append('file', fileObject as any);

            const apiUrl = process.env.EXPO_PUBLIC_API_URL_GEO;
            const token = await AsyncStorage.getItem('authToken');

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            console.log('[DEBUG] API URL:', apiUrl);
            console.log('[DEBUG] Token exists:', !!token);

            // –í—ã–∑–æ–≤ API
            const response = await axios.post(
                `${apiUrl}/api/v1/events/uploadEventPreview?event_id=${eventId}&token=${token}`, // eventId –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ query –ø–∞—Ä–∞–º–µ—Ç—Ä
                formData,
                {
                    timeout: 10000, // –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
                }
            );

            console.log('[DEBUG] Upload response:', response);
            return response.data;
        } catch (error) {
            console.error('[ERROR] Image upload failed:', error);
            throw error;
        }
    };

    const snapPoints = useMemo(() => ['90%'], []);

    const animationConfigs = useBottomSheetSpringConfigs({
        damping: 80,
        overshootClamping: true,
        restDisplacementThreshold: 0.1,
        restSpeedThreshold: 0.1,
        stiffness: 200,
    });

    const renderBackdrop = useCallback(
        (props: any) => <BottomSheetBackdrop appearsOnIndex={0} disappearsOnIndex={-1} {...props} />,
        []
    );

    return (
        <BottomSheetModal
            ref={ref}
            index={0}
            snapPoints={snapPoints}
            enablePanDownToClose={false}
            animationConfigs={animationConfigs}
            backdropComponent={renderBackdrop}
            android_keyboardInputMode={'adjustResize'}
            keyboardBehavior={'extend'}
            onDismiss={onClose}
        >
            <BottomSheetView style={styles.contentContainer}>
                <Text style={styles.containerHeadline}>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</Text>
                <TouchableOpacity
                    style={styles.imagePicker}
                    onPress={handleImagePick}
                    disabled={isSubmitting}
                >
                    {selectedImage ? (
                        <Image
                            source={{uri: selectedImage}}
                            style={styles.imagePreview}
                            resizeMode="cover"
                        />
                    ) : (
                        <Text style={styles.imagePickerText}>
                            {isSubmitting ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–±–ª–æ–∂–∫—É'}
                        </Text>
                    )}
                </TouchableOpacity>

                <Text style={styles.inputText}>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</Text>
                <BottomSheetTextInput
                    style={styles.input}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                    maxLength={30}
                    defaultValue={name}  // –ò—Å–ø–æ–ª—å–∑—É–µ–º localName –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
                    onChangeText={handleNameChange}
                    editable={!isSubmitting}
                />

                <Text style={styles.inputText}>–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</Text>
                <BottomSheetTextInput
                    style={[styles.input, {height: 100}]}
                    placeholder="–û–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ"
                    multiline={true}
                    numberOfLines={4}
                    defaultValue={description}   // –ò—Å–ø–æ–ª—å–∑—É–µ–º localDescription –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
                    onChangeText={handleDescriptionChange}
                    editable={!isSubmitting}
                />
                <ConfirmButton
                    onPress={handleUpdateSave}
                    text={'–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
                    disabled={isSubmitting}
                />
            </BottomSheetView>
        </BottomSheetModal>
    );
}));

const styles = StyleSheet.create({
    contentContainer: {
        flex: 1,
        alignItems: 'center',
        padding: 5,
    },
    containerHeadline: {
        fontSize: 20,
        fontWeight: '600',
        padding: 10,
    },
    input: {
        marginTop: 8,
        marginBottom: 10,
        borderRadius: 10,
        fontSize: 16,
        lineHeight: 20,
        width: '80%',
        padding: 8,
        backgroundColor: 'rgba(151, 151, 151, 0.25)',
    },
    inputText: {
        fontSize: 14,
        alignSelf: 'flex-start',
        paddingLeft: '10%',
    },
    // üö® NEW STYLES
    imagePicker: {
        width: '80%',
        height: 150,
        backgroundColor: '#f0f0f0',
        borderRadius: 10,
        marginVertical: 10,
        justifyContent: 'center',
        alignItems: 'center',
        borderWidth: 1,
        borderColor: '#ccc',
        opacity: 1,
    },
    imagePreview: {
        width: '100%',
        height: '100%',
        borderRadius: 10,
    },
    imagePickerText: {
        color: '#666',
        fontSize: 14,
        textAlign: 'center',
        paddingHorizontal: 20,
    },
});

export default EventCreationBottomSheetModal;